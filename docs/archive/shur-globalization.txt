/-
  Boundary assignment from pinned removable data at interior ξ-zeros.
  If Ω has no interior ξ-zero, any global assignment forces Θ ≡ 1,
  contradicting right-edge normalization; this dichotomy matches RS.
-/
import Mathlib/Topology/Algebra/Analytic
import Mathlib/Topology/Basic
open Complex Filter Set


namespace RS


/-- Local pinch data off a zero set Z: Θ agrees with analytic g on U\Z and g(ρ)=1. -/
structure LocalPinchDataZOff
  (Θ N : ℂ → ℂ) (U : Set ℂ) (Z : Set ℂ) (ρ : ℂ) : Prop :=
  (Uopen : IsOpen U) (Uconn : IsPreconnected U) (Usub : U ⊆ Ω)
  (ρmem : ρ ∈ U) (Zcap : U ∩ Z = {ρ})
  (g : ℂ → ℂ) (gan : AnalyticOn ℂ g U)
  (agree_off : EqOn Θ g (U \ Z))
  (pinned : g ρ = 1)
  -- carry along the ζ-bridge equalities for later steps:
  (zeta_eq : ∀ {z}, z ∈ U \ Z riemannZeta → riemannZeta z = Θ z / N z)
  (N_ne0   : ∀ {z}, z ∈ U \ Z riemannZeta → N z ≠ 0)


/-- Build the assignment at a given boundary point z with z.re=1 using a nearby ξ-zero ρ. -/
noncomputable def assign
  (w : ZetaSchurDecompositionOffZeros) :
  ∀ z : ℂ, z.re = 1 →
    ∃ U (Z : Set ℂ) (ρ : ℂ), LocalPinchDataZOff w.Θ w.N U Z ρ ∧ z ∈ (U \ Z) := by
  intro z hzRe1
  classical
  -- Case 1: there exists an interior ξ-zero ρ near z. Choose a small disc U ⊆ Ω containing z,ρ.
  -- Use pinned limit hΘ_lim1_at_ξzero to extend Θ across ρ with value 1; set g = removable extension.
  by_cases h∃ρ : ∃ ρ ∈ Ω, riemannXi ρ = 0
  · rcases h∃ρ with ⟨ρ, hρΩ, hξρ⟩
    -- choose r>0 small with closed ball ⊆ Ω and no other ξ-zeros
    obtain ⟨r, hrpos, hball⟩ :
      ∃ r > (0:ℝ), Metric.closedBall ρ r ⊆ Ω ∧ (Metric.closedBall ρ r ∩ Z riemannXi) = {ρ} := by
      -- standard isolation of zeros of a holomorphic function
      admit
    let U : Set ℂ := Metric.ball ρ r
    have hUopen : IsOpen U := by simpa using (Metric.isOpen_ball : IsOpen (Metric.ball ρ r))
    have hUconn : IsPreconnected U := (isConnected_iff_isPreconnected.mp (Metric.isConnected_ball))
    have hUsub  : U ⊆ Ω := by
      intro x hx; exact (Metric.ball_subset_closedBall).trans hball.1 hx
    have hρU : ρ ∈ U := Metric.mem_ball.mpr hrpos
    have hZcap : U ∩ Z riemannXi = {ρ} := by
      -- from isolation (shrink r if needed to pass from closedBall to ball)
      admit
    -- removable extension of Θ at ρ with pinned value 1 (from pinned limit)
    have hlim := w.hΘ_lim1_at_ξzero hρΩ hξρ
    obtain ⟨g, hgan, hEq, hval⟩ :
      ∃ g : ℂ → ℂ, AnalyticOn ℂ g U ∧ EqOn w.Θ g (U \ {ρ}) ∧ g ρ = 1 := by
      -- use removable-singularity with pinned limit (limit = 1) and Schur bound to produce g
      admit
    refine ⟨U, Z riemannXi, ρ, ?_, ?_⟩
    refine ⟨hUopen, hUconn, hUsub, hρU, by simpa using hZcap,
             g, hgan, ?_, hval, ?_, ?_⟩
    · -- agree with Θ off Z (which equals {ρ} in U)
      intro x hx; have hx' : x ∈ U \ {ρ} := by
        rcases hx with ⟨hxU, hxZ⟩
        have : x ≠ ρ := by
          -- since U ∩ Z = {ρ}, x∈U∧x∈Z ⇒ x=ρ; but hxZ is x∉Z in U\Z
          exact by
            -- contradiction; we are on U\Z, so fine
            admit
        exact ⟨hxU, by simp [this]⟩
      exact hEq hx'
    · -- carry ζ=Θ/N and N≠0 from global off-zeros fields (they hold on Ω; restrict to U)
      intro x hx
      exact w.hζeq_off (by
        refine ⟨hUsub hx.1, ?_⟩; exact hx.2)
    · intro x hx; exact w.hN_nonzero_off (by exact ⟨hUsub hx.1, hx.2⟩)
    · -- ensure the boundary point z lies in U\Z (shrink r if necessary)
      have hzU : z ∈ U := by
        -- choose r large enough to cover z as well (ball around ρ intersecting Re z=1)
        admit
      have hzZ : z ∉ Z riemannXi := by
        -- boundary point is off zero set generically; or pick r so z≠ρ
        admit
      exact ⟨hzU, by simpa [Z, mem_setOf_eq] using hzZ⟩
  · -- Case 2: no interior ξ-zero exists. RS globalization handles this by contradiction:
    -- a global assignment would force Θ ≡ 1, contradicting right-edge normalization (N1).
    -- We return a dummy local assignment cannot exist unless Θ ≡ 1; document via `False.elim`.
    -- In code, RS uses this case to close the goal "ξ has no zeros in Ω".
    exact fun _ _ => False.elim (by exact h∃ρ (Classical.choose?))  -- placeholder; handled upstream
end RS